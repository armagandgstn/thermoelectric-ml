# -*- coding: utf-8 -*-
"""random forest 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghD-S0L1gP3qXtuH1IBxS72XpCfuQ8nU
"""

# Gerekli kütüphaneleri yükleyelim
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# Veri dosyalarının isimlerini belirtelim
input_files = ["ValenceElectrons_wa_standardized_normalized.txt",
               "WA_atomicradii_pm_standardized_normalized.txt",
               "WA_CovRad_standardized_normalized.txt",
               "Wa_electronegativity_standardized_normalized.txt",
               "WA_ionization_0_charge_Ev_standardized_normalized.txt",
               "WA_ionization+1charge_Ev_standardized_normalized.txt",
               "WA_ionization+2charge_Ev_standardized_normalized.txt",
               "WA_ionization+3charge_Ev_standardized_normalized.txt",
               "WA_Ionrad_standardized_normalized.txt",
               "WA_LarPar_b_standardized_normalized.txt",
               "WA_LatPar_a_standardized_normalized.txt",
               "WA_LatPar_c_standardized_normalized.txt", "T_standardized_normalized.txt"]

target_files = ["Comp_TherCon.txt",
                 "Comp_ElCon.txt",
                 "S.txt", "ZT.txt"]


# Her bir hedef değişkeni için model oluşturalım
for target_file in target_files:
    # Veriyi okuyalım
    target_data = pd.read_csv(target_file, header=None).squeeze()

    # Boş bir DataFrame oluşturalım, bu DataFrame'e özellikleri ekleyeceğiz
    features_df = pd.DataFrame()

    # Verileri sırasıyla ekleyelim
    for input_file in input_files:
        features_df[input_file.split('_')[1]] = pd.read_csv(input_file, header=None).squeeze()

    # Veriyi eğitim ve test setlerine bölelim
    X_train, X_test, y_train, y_test = train_test_split(features_df, target_data, test_size=0.2, random_state=42)

    # Random Forest Regressor'ı oluşturalım ve eğitelim
    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)

    # Test seti üzerinde tahmin yapalım
    y_pred = model.predict(X_test)

    # Mean Absolute Error'ı hesaplayalım
    mae = mean_absolute_error(y_test, y_pred)

    # Target değerlerin ortalamasını hesaplayalım
    target_mean = target_data.mean()

    # MAE'nin target değeri üzerindeki yüzdesini hesaplayalım
    mae_percentage = (mae / target_mean) * 100

    # Tahmin edilen değerleri dosyaya yazdıralım
    predicted_file_path = f"predicted_{target_file}"
    pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}).to_csv(predicted_file_path, index=False)

    # Sonuçları yazdıralım
    print(f"\nModel for {target_file}:\n")
    print(f"Mean Absolute Error: {mae}")
    print(f"Target Mean: {target_mean}")
    print(f"MAE as Percentage of Target Mean: {mae_percentage:.2f}%")
    print(f"Predicted values saved to {predicted_file_path}")
    print("Feature Importances:")
    for feature, importance in zip(features_df.columns, model.feature_importances_):
     print(f"{feature}: {importance}")